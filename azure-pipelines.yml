# azure-pipelines.yml
trigger:
- main

pool:
  name: Default   # Replace with your self-hosted Windows agent pool

variables:
  # Repo root is default; if your index.html is in a subfolder, set this
  SourceFolder: '$(Build.SourcesDirectory)'

steps:
# 1) Checkout your repo (must be first)
- checkout: self
  clean: true

# 2) Debug: list files in the repo root
- task: PowerShell@2
  displayName: "Debug: list repo root"
  inputs:
    targetType: inline
    script: |
      Write-Host "Build.SourcesDirectory = $(Build.SourcesDirectory)"
      Get-ChildItem -Force "$(SourceFolder)" |
        Select Name,FullName,Length,LastWriteTime |
        Format-Table

# 3) Verify that index.html exists in the folder we expect
- task: PowerShell@2
  displayName: "Verify index.html exists"
  inputs:
    targetType: inline
    script: |
      $index = Join-Path "$(SourceFolder)" "index.html"
      if (!(Test-Path $index)) {
        Write-Error "index.html not found in $(SourceFolder). Commit it there or update 'SourceFolder'."
        exit 1
      }
      Write-Host "✓ index.html found at: $index"

# 4) Package the contents into a ZIP
- task: PowerShell@2
  displayName: "Package site to ZIP"
  inputs:
    targetType: inline
    script: |
      $src = "$(SourceFolder)"
      $outDir = "$(Build.ArtifactStagingDirectory)"
      if (!(Test-Path $outDir)) { New-Item -ItemType Directory -Path $outDir | Out-Null }
      $zip = Join-Path $outDir "site.zip"
      if (Test-Path $zip) { Remove-Item $zip -Force }
      Write-Host "Zipping contents of $src to $zip"
      Push-Location $src
      $items = Get-ChildItem -Force | Where-Object Name -ne '.git'
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      $tmp = Join-Path $env:TEMP ("pkg_" + [Guid]::NewGuid())
      New-Item -ItemType Directory -Path $tmp | Out-Null
      foreach ($i in $items) { Copy-Item $i.FullName -Destination $tmp -Recurse }
      [System.IO.Compression.ZipFile]::CreateFromDirectory($tmp, $zip)
      Remove-Item -Recurse -Force $tmp
      Pop-Location
      if (!(Test-Path $zip)) { Write-Error "ZIP creation failed"; exit 1 }
      Write-Host "✓ Created $zip ($(Get-Item $zip).Length bytes)"

# 5) Optional: verify ZIP contents
- task: ExtractFiles@1
  displayName: "Extract site.zip (verify)"
  inputs:
    archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/site.zip'
    destinationFolder: '$(Build.SourcesDirectory)/extracted'
    cleanDestinationFolder: true

- task: PowerShell@2
  displayName: "Verify extracted index.html"
  inputs:
    targetType: inline
    script: |
      $idx = "$(Build.SourcesDirectory)\extracted\index.html"
      if (!(Test-Path $idx)) { Write-Error "Extraction failed"; exit 1 }
      Write-Host "✓ Extraction OK: $idx"

# 6) Publish the ZIP as an artifact (optional)
- publish: '$(Build.ArtifactStagingDirectory)/site.zip'
  artifact: sitezip

# 7) Deploy to Azure Static Web Apps
- task: AzureStaticWebApp@0
  displayName: "Deploy to Azure Static Web Apps: anshu-abhi-balloongame"
  inputs:
    azure_static_web_apps_api_token: '$(SWA_DEPLOYMENT_TOKEN)'
    app_location: '$(Build.SourcesDirectory)/extracted'
    api_location: ''
    output_location: ''
    skip_app_build: true
    skip_api_build: true
    is_static_export: true
